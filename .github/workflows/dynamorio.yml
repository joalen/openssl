name: Run DynamoRIO

on:
  push:

jobs:
  run-dynamorio:
    name: '${{ matrix.os }} + ${{ matrix.arch }} --> ${{ matrix.analysis_tool }}'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]
        arch: [armv7, aarch64, x64, x86, mips, mips64]
        analysis_tool: ['coverage', 'cachesim', 'memtrace', 'cpusim']
    steps:
      - name: Check out repository
        uses: actions/checkout@v4 
        with:
          ref: 1977c00f00ad0546421a5ec0b40c1326aee4cddb
          
      - name: Build repository 
        run: | 
          ./Configure && make
        continue-on-error: true 

      - name: Install DynamoRIO
        if: runner.os == 'Linux'
        run: | 
          sudo apt-get update
          sudo apt-get install -y libunwind8
          wget -P /tmp/ https://github.com/DynamoRIO/dynamorio/releases/download/release_10.0.0/DynamoRIO-Linux-10.0.0.tar.gz && tar -xzf /tmp/DynamoRIO-Linux-10.0.0.tar.gz -C /tmp/
           
      - name: Disable Address Space Randomization
        if: runner.os == 'Linux'
        run: sudo sysctl -w kernel.randomize_va_space=0
      
      - name: Disable swapping 
        if: runner.os == 'Linux' 
        run: sudo swapoff -a
        
      - name: Set up DynamoRIO
        run: |
          export DYNAMORIO_HOME="/tmp/DynamoRIO-Linux-10.0.0"
          export GITHUB_PATH="$DYNAMORIO_HOME/bin64:$DYNAMORIO_HOME/tools/bin64:$GITHUB_PATH"
          export LD_LIBRARY_PATH="$DYNAMORIO_HOME/lib64:$LD_LIBRARY_PATH"
        
      - name: Run DynamoRIO (${{ matrix.analysis_tool }})
        run: |
          #!/bin/bash
          set +e
          
          DIRECTORY=.
          is_executable() {
            local file="$1"
            if file "$file" | grep -q 'ELF 64-bit'; then
              return 0
            else
              return 1
            fi
          }
          
          case "${{ matrix.analysis_tool }}" in
            coverage)
              echo "=========[DynamoRIO Code Coverage Service Started!]========="
              mkdir -p logs_coverage
              find "$DIRECTORY" -type f -executable | while read -r file; do
                if is_executable "$file"; then
                  $DYNAMORIO_HOME/bin64/drrun -t drcov -logdir "logs_coverage" -dump_text -- "$file"
                  for log_file in "logs_coverage"/drcov.*.log; do
                    $DYNAMORIO_HOME/tools/bin64/drcov2lcov -input "$log_file" -src_filter "logs_coverage"
                  done
                fi
              done
              find ./logs_coverage/* -type f -size 0 -delete
              echo "=========[DynamoRIO Code Coverage service finished]========="
              ;;
            cachesim)
              echo "=========[DynamoRIO Cachesim Service Started!]========="
              mkdir -p logs_cachesim
              find "$DIRECTORY" -type f -executable | while read -r file; do
                if is_executable "$file"; then
                  local base_name=$(basename "$file")
                  timeout --signal=SIGQUIT 30s $DYNAMORIO_HOME/bin64/drrun -t drcachesim -- "$file" > "logs_cachesim/${base_name}-drcachesim.log" 2>&1
                fi
              done
              find ./logs_cachesim/* -type f -size 0 -delete
              echo "=========[DynamoRIO Cachesim service finished]========="
              ;;
            memtrace)
              echo "=========[DynamoRIO Memtrace Service Started!]========="
              mkdir -p logs_memtrace
              find "$DIRECTORY" -type f -executable | while read -r file; do
                if is_executable "$file"; then
                  local base_name=$(basename "$file")
                  timeout --signal=SIGQUIT 30s $DYNAMORIO_HOME/bin64/drrun -c samples/bin64/libmemtrace_x86_text.so -offline -logdir "logs_memtrace" -tool TLB -- "$file" > "logs_memtrace/${base_name}-TLB.log" 2>&1
                  timeout --signal=SIGQUIT 30s $DYNAMORIO_HOME/bin64/drrun -t samples/bin64/libmemtrace_x86_text.so -offline -logdir "logs_memtrace" -tool reuse_distance -reuse_distance_histogram -- "$file" > "logs_memtrace/${base_name}-reuse_dist.log" 2>&1
                  # Add additional memtrace tools here
                fi
              done
              find ./logs_memtrace/* -type f -size 0 -delete
              echo "=========[DynamoRIO Memtrace service finished]========="
              ;;
            cpusim)
              echo "=========[DynamoRIO CPU Sim Service Started!]========="
              mkdir -p logs_cpusim
              find "$DIRECTORY" -type f -executable | while read -r file; do
                if is_executable "$file"; then
                  local base_name=$(basename "$file")
                  cpus=("Pentium" "PentiumMMX" "PentiumPro" "Pentium2" "Klamath" "Deschutes" "Pentium3" "Coppermine" "Tualatin" "PentiumM" "Banias" "Dothan" "Willamette" "Northwood" "Pentium4" "Prescott" "Presler" "Core2" "Merom" "Penryn" "Nehalem" "Westmere" "Sandybridge" "Ivybridge")
                  for cpu in "${cpus[@]}"; do
                    timeout --signal=SIGQUIT 30s $DYNAMORIO_HOME/bin64/drrun -t drcpusim -continue -ignore_all_libs -cpu "$cpu" -- "$file" > "logs_cpusim/${base_name}-ran-on-${cpu}.log" 2>&1
                  done
                fi
              done
              find ./logs_cpusim/* -type f -size 0 -delete
              echo "=========[DynamoRIO CPU Sim service finished]========="
              ;;
            *)
              echo "Invalid analysis tool: ${{ matrix.analysis_tool }}"
              exit 1
              ;;
          esac
            
      - name: Upload DynamoRIO reports
        uses: actions/upload-artifact@v4
        with:
          name: dynamoRIO-${{ matrix.analysis_tool }}-report-${{ github.event.repository.name }}-on-${{ runner.os }}-under-${{ runner.arch }}
          path: logs_${{ matrix.analysis_tool }}/*
